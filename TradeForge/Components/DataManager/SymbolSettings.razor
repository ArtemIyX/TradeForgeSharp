@using TradeForge.Core.Enums
@using TradeForge.Core.Extensions
@using TradeForge.Core.Models
@using TradeForge.Components.DataManager.Inputs
@using TradeForge.Services
@using TradeForge.SymbolManager.Services.Interfaces

<div class="columns">
    <div class="column is-half-desktop is-offset-one-quarter-desktop">
        <div class="box has-background-dark">

            <TextInput Label="Ticker" @bind-Value="Current.Ticker"/>
            <TextInput Label="Description" @bind-Value="Current.Description"/>
            <TextInput Label="Category" @bind-Value="Current.Category"/>
            <TextInput Label="Units" @bind-Value="Current.Units"/>

            <NumberInput Label="Contract Size" @bind-Value="Current.ContractSize"/>
            <NumberInput Label="Min Volume" @bind-Value="Current.MinVolume"/>
            <NumberInput Label="Max Volume" @bind-Value="Current.MaxVolume"/>
            <NumberInput Label="Volume Step" @bind-Value="Current.VolumeStep"/>
            <NumberInput Label="Min Tick" @bind-Value="Current.MinTick"/>
            <NumberInput Label="Leverage" @bind-Value="Current.Leverage"/>

            <EnumInput Label="Trade Mode" @bind-Value="Current.TradeMode"/>

            <div class="field is-grouped is-grouped-right mt-5">
                <div class="control">
                    <button class="button is-primary" @onclick="SaveAsync">Save</button>
                </div>
                <div class="control">
                    <button class="button is-light" @onclick="ResetAsync">Reset</button>
                </div>
            </div>

        </div>
    </div>
</div>

@code
{

    [Inject] protected ISymbolManager SymbolManager { get; set; }

    [Inject] protected IAlertService AlertService { get; set; }

    [Parameter] public InstrumentSettings InputSettings { get; set; } = new InstrumentSettings();

    private InstrumentSettings Current { get; set; } = new();


    protected override async Task OnInitializedAsync()
    {
        try
        {
            await ResetAsync();
        }
        catch (Exception ex)
        {
            AlertService.ShowError($"Error: {ex.Message}");
        }
    }

    private Task SaveAsync()
    {
        return Task.Run(() =>
        {
            try
            {
                // Apply to parameter 
                SymbolManager.EditSymbol(InputSettings.Ticker, Current);

                InputSettings = new InstrumentSettings(Current);

                AlertService.ShowInfo($"Saved '{Current.Ticker} to disk'");
            }
            catch (Exception ex)
            {
                AlertService.ShowError($"Error: {ex.Message}");
            }
        });
    }

    private Task ResetAsync()
    {
        return Task.Run(async () =>
        {
            try
            {
                Current = await LoadAsync();
                AlertService.ShowInfo($"Loaded '{Current.Ticker}' from disk");
            }
            catch (Exception ex)
            {
                AlertService.ShowError($"Error: {ex.Message}");
            }
        });
    }

    /* --- persistence stubs --- */
    private Task<InstrumentSettings> LoadAsync()
    {
        return Task.Run(() =>
        {
            InstrumentSettings? symbol = SymbolManager.GetSymbol(InputSettings.Ticker);
            if (symbol is null)
            {
                throw new Exception($"Failed to get symbol '{InputSettings.Ticker}'");
            }

            return symbol;
        });
    }

}