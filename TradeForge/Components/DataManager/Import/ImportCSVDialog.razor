@using CsvHelper.Configuration
@using TradeForge.Core.Models

@using CsvHelper.Configuration
@using System.Globalization
@using TradeForge.Services
@using Microsoft.Maui.Storage

<!-- File selection -->
<div class="field">
    <label class="label">CSV file</label>
    <div class="field has-addons">
        <div class="control is-expanded">
            <input class="input" type="text" readonly
                   value="@FilePath"
                   placeholder="Select a file…"/>
        </div>
        <div class="control">
            <button class="button" @onclick="BrowseClick">
                <span class="icon">
                    <i class="fas fa-folder-open"></i>
                </span>
            </button>
        </div>
    </div>
</div>

<table class="table is-narrow is-fullwidth mb-2">
    <tbody>
    @foreach (var f in _fields)
    {
        <tr>
            <td class="has-text-weight-semibold is-vcentered is-narrow"
                style="white-space:nowrap;">
                @f.Label
            </td>
            <td style="padding: 0.25rem 0;">
                <input class="input is-small"
                       type="text"
                       placeholder="CSV header"
                       @bind="f.Header"/>
            </td>
        </tr>
    }
    </tbody>
</table>


@code {
    [Inject] IAlertService Alert { get; set; }


    public class FieldMap
    {
        public string Label { get; init; } = "";
        public string Header { get; set; } = "";
        public Action<ClassMap<OHLC>, string> Apply { get; init; } = (_, __) => { };
    }

    public string FilePath { get; set; } = "";

    private readonly List<FieldMap> _fields = new()
    {
        new() { Label = "Timestamp", Header = "Datetime", Apply = (m, h) => m.Map(x => x.Timestamp).Name(h) },
        new() { Label = "Open", Header = "Open", Apply = (m, h) => m.Map(x => x.Open).Name(h) },
        new() { Label = "High", Header = "High", Apply = (m, h) => m.Map(x => x.High).Name(h) },
        new() { Label = "Low", Header = "Low", Apply = (m, h) => m.Map(x => x.Low).Name(h) },
        new() { Label = "Close", Header = "Close", Apply = (m, h) => m.Map(x => x.Close).Name(h) },
        new() { Label = "Volume", Header = "Volume", Apply = (m, h) => m.Map(x => x.Volume).Name(h) }
    };

    private async Task BrowseClick()
    {
        try
        {
            var result = await FilePicker.Default.PickAsync(new PickOptions
            {
                PickerTitle = "Please select a CSV file",
                FileTypes = new FilePickerFileType(
                    new Dictionary<DevicePlatform, IEnumerable<string>>
                    {
                        { DevicePlatform.WinUI, [".csv"] },
                        { DevicePlatform.Android, ["text/comma-separated-values"] },
                        { DevicePlatform.iOS, ["public.comma-separated-values-text"] },
                        { DevicePlatform.macOS, [".csv"] }
                    })
            });

            if (result != null)
                FilePath = result.FullPath;
        }
        catch (Exception ex)
        {
            Alert.ShowError($"Failed to select file: {ex.Message}");
        }
    }

    private sealed class DynamicOhlcMap : ClassMap<OHLC>
    {
    }

    /// <summary>
    /// Builds a ClassMap<OHLC> from the user-supplied header names.
    /// </summary>
    public ClassMap<OHLC> BuildClassMap()
    {
        var map = new DynamicOhlcMap();
        foreach (var f in _fields)
        {
            if (string.IsNullOrWhiteSpace(f.Header))
            {
                throw new NullReferenceException($"'{f.Label}' can not be empty");
            }

            f.Apply(map, f.Header.Trim());
        }

        return map;
    }

}