@using System.Linq.Expressions
@using TradeForge.Core.Enums
@using TradeForge.Core.Extensions
@using TradeForge.Core.Models
@using System.Globalization
@using TradeForge.Components.DataManager

<div class="table-container">
    <table class="table is-fullwidth is-hoverable is-striped">
        <thead>
            <tr>
                <SymbolTableHeader TItem="InstrumentSettings" TKey="string"
                                        Title="Name"
                                        CurrentSortBy="@sortBy"
                                        CurrentDescending="@sortDesc"
                                        KeyExpression="s => s.Ticker"
                                        SortChanged="@(e => { sortBy = e.Property; sortDesc = e.Desc; })" />

                <SymbolTableHeader TItem="InstrumentSettings" TKey="string"
                                        Title="Description"
                                        CurrentSortBy="@sortBy"
                                        CurrentDescending="@sortDesc"
                                        KeyExpression="s => s.Description"
                                        SortChanged="@(e => { sortBy = e.Property; sortDesc = e.Desc; })" />

                <SymbolTableHeader TItem="InstrumentSettings" TKey="Timeframe"
                                        Title="Min TF"
                                        CurrentSortBy="@sortBy"
                                        CurrentDescending="@sortDesc"
                                        KeyExpression="s => s.Summary.MinimalTimeframe"
                                        SortChanged="@(e => { sortBy = e.Property; sortDesc = e.Desc; })" />

                <SymbolTableHeader TItem="InstrumentSettings" TKey="DateTime"
                                        Title="From"
                                        CurrentSortBy="@sortBy"
                                        CurrentDescending="@sortDesc"
                                        KeyExpression="s => s.Summary.DateFrom"
                                        SortChanged="@(e => { sortBy = e.Property; sortDesc = e.Desc; })" />

                <SymbolTableHeader TItem="InstrumentSettings" TKey="DateTime"
                                        Title="To"
                                        CurrentSortBy="@sortBy"
                                        CurrentDescending="@sortDesc"
                                        KeyExpression="s => s.Summary.DateTo"
                                        SortChanged="@(e => { sortBy = e.Property; sortDesc = e.Desc; })" />

                <SymbolTableHeader TItem="InstrumentSettings" TKey="int"
                                        Title="Days"
                                        CurrentSortBy="@sortBy"
                                        CurrentDescending="@sortDesc"
                                        KeyExpression="s => s.Summary.TotalDays"
                                        SortChanged="@(e => { sortBy = e.Property; sortDesc = e.Desc; })" />

                <SymbolTableHeader TItem="InstrumentSettings" TKey="int"
                                        Title="Records"
                                        CurrentSortBy="@sortBy"
                                        CurrentDescending="@sortDesc"
                                        KeyExpression="s => s.Summary.TotalRecords"
                                        SortChanged="@(e => { sortBy = e.Property; sortDesc = e.Desc; })" />

                <SymbolTableHeader TItem="InstrumentSettings" TKey="string"
                                        Title="Category"
                                        CurrentSortBy="@sortBy"
                                        CurrentDescending="@sortDesc"
                                        KeyExpression="s => s.Category"
                                        SortChanged="@(e => { sortBy = e.Property; sortDesc = e.Desc; })" />
            </tr>
        </thead>
        <tbody>
            @foreach (var s in sortedSymbols)
            {
                <tr class="@(s == SelectedSymbol ? "is-selected" : "")"
                    @onclick="() => OnSymbolSelected.InvokeAsync(s)">
                    <td><strong>@s.Ticker</strong></td>
                    <td>@s.Description</td>
                    <td>@s.Summary.MinimalTimeframe</td>
                    <td>@s.Summary.DateFrom.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture)</td>
                    <td>@s.Summary.DateTo.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture)</td>
                    <td>@s.Summary.TotalDays</td>
                    <td>@s.Summary.TotalRecords</td>
                    <td><span class="tag is-info is-light">@s.Category</span></td>
                </tr>
            }
        </tbody>
    </table>
</div>


@code {
    [Parameter] public InstrumentSettings? SelectedSymbol { get; set; }
    [Parameter] public InstrumentSettings[] Symbols { get; set; } = Array.Empty<InstrumentSettings>();
    [Parameter] public EventCallback<InstrumentSettings> OnSymbolSelected { get; set; }

    private string? sortBy;
    private bool sortDesc;

    private IEnumerable<InstrumentSettings> sortedSymbols =>
    sortBy is null
        ? Symbols
        : Symbols.OrderBy(x => x, new ComparisonComparer<InstrumentSettings>(InstrumentSettings.GetComparer(sortBy, sortDesc)));

    

}
