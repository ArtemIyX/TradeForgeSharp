@using System.Linq.Expressions
@using TradeForge.Core.Enums
@using TradeForge.Core.Extensions
@using TradeForge.Core.Models
@using System.Globalization
@using Microsoft.Extensions.Logging
@using TradeForge.Components.DataManager
@using TradeForge.Components.Shared
@using TradeForge.Models
@inject IJSRuntime JS

<button class="button is-primary" @onclick="ShowCreateSymbolModal">
    <span class="icon"><i class="fas fa-plus"></i></span>
    <span>Add Symbol</span>
</button>

<div class="table-container mt-4">
    <table class="table is-fullwidth is-hoverable is-striped">
        <thead>
        <tr>
            <SymbolTableHeader TItem="InstrumentSettings" TKey="string"
                               Title="Name"
                               CurrentSortBy="@sortBy"
                               CurrentDescending="@sortDesc"
                               KeyExpression="s => s.Ticker"
                               SortChanged="@(e =>
                                            {
                                                sortBy = e.Property;
                                                sortDesc = e.Desc;
                                            })"/>

            <SymbolTableHeader TItem="InstrumentSettings" TKey="string"
                               Title="Description"
                               CurrentSortBy="@sortBy"
                               CurrentDescending="@sortDesc"
                               KeyExpression="s => s.Description"
                               SortChanged="@(e =>
                                            {
                                                sortBy = e.Property;
                                                sortDesc = e.Desc;
                                            })"/>

            <SymbolTableHeader TItem="InstrumentSettings" TKey="Timeframe"
                               Title="Min TF"
                               CurrentSortBy="@sortBy"
                               CurrentDescending="@sortDesc"
                               KeyExpression="s => s.Summary.MinimalTimeframe"
                               SortChanged="@(e =>
                                            {
                                                sortBy = e.Property;
                                                sortDesc = e.Desc;
                                            })"/>

            <SymbolTableHeader TItem="InstrumentSettings" TKey="DateTime"
                               Title="From"
                               CurrentSortBy="@sortBy"
                               CurrentDescending="@sortDesc"
                               KeyExpression="s => s.Summary.DateFrom"
                               SortChanged="@(e =>
                                            {
                                                sortBy = e.Property;
                                                sortDesc = e.Desc;
                                            })"/>

            <SymbolTableHeader TItem="InstrumentSettings" TKey="DateTime"
                               Title="To"
                               CurrentSortBy="@sortBy"
                               CurrentDescending="@sortDesc"
                               KeyExpression="s => s.Summary.DateTo"
                               SortChanged="@(e =>
                                            {
                                                sortBy = e.Property;
                                                sortDesc = e.Desc;
                                            })"/>

            <SymbolTableHeader TItem="InstrumentSettings" TKey="int"
                               Title="Days"
                               CurrentSortBy="@sortBy"
                               CurrentDescending="@sortDesc"
                               KeyExpression="s => s.Summary.TotalDays"
                               SortChanged="@(e =>
                                            {
                                                sortBy = e.Property;
                                                sortDesc = e.Desc;
                                            })"/>

            <SymbolTableHeader TItem="InstrumentSettings" TKey="int"
                               Title="Records"
                               CurrentSortBy="@sortBy"
                               CurrentDescending="@sortDesc"
                               KeyExpression="s => s.Summary.TotalRecords"
                               SortChanged="@(e =>
                                            {
                                                sortBy = e.Property;
                                                sortDesc = e.Desc;
                                            })"/>

            <SymbolTableHeader TItem="InstrumentSettings" TKey="string"
                               Title="Category"
                               CurrentSortBy="@sortBy"
                               CurrentDescending="@sortDesc"
                               KeyExpression="s => s.Category"
                               SortChanged="@(e =>
                                            {
                                                sortBy = e.Property;
                                                sortDesc = e.Desc;
                                            })"/>
        </tr>
        </thead>
        <tbody>
        @foreach (var s in sortedSymbols)
        {
            <tr class="@(s == SelectedSymbol ? "is-selected" : "")"
                @onclick="() => OnSymbolSelected.InvokeAsync(s)"
                @oncontextmenu:preventDefault
                @oncontextmenu="e => _menu1!.ShowAsync(e.ClientX, e.ClientY)">
                <td><strong>@s.Ticker</strong></td>
                <td>@s.Description</td>
                <td>@s.Summary.MinimalTimeframe</td>
                <td>@s.Summary.DateFrom.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture)</td>
                <td>@s.Summary.DateTo.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture)</td>
                <td>@s.Summary.TotalDays</td>
                <td>@s.Summary.TotalRecords</td>
                <td><span class="tag is-info is-light">@s.Category</span></td>
            </tr>
        }
        </tbody>
    </table>
</div>

<GenericPromptModal @ref="_createSymbolModal"
                    Title="Add new symbol"
                    Label="Enter symbol name"
                    Placeholder="BTCUSDT"
                    ButtonText="Create"
                    OnSuccess="SymbolCreateRequest"
                    OnDiscard="() => { }" />

<ContextMenu @ref="_menu1" Items="_items1"/>


@code {
    private GenericPromptModal _createSymbolModal = default!;
    
    [Inject] protected ILogger<SymbolTable> Logger { get; set; }
    private ContextMenu? _menu1;
    private ContextMenu? _menu2;

    private List<ContextMenuItem> _items1;

    private List<ContextMenuItem> _items2 = new()
    {
        new() { Text = "Delete", OnClick = () => Task.CompletedTask }
    };

    [Parameter] public InstrumentSettings? SelectedSymbol { get; set; }
    [Parameter] public List<InstrumentSettings> Symbols { get; set; } = [];
    [Parameter] public EventCallback<InstrumentSettings> OnSymbolSelected { get; set; }
    [Parameter] public EventCallback<string> OnSymbolCreated { get; set; }
    
    private string? newSymbolName;

    private string? sortBy;
    private bool sortDesc;

    public SymbolTable()
    {
        _items1 = new List<ContextMenuItem>
        {
            new()
            {
                Text = "Copy", OnClick = () =>
                {
                    Logger.LogError("Copy");
                    return Task.CompletedTask;
                }
            }
        };
    }
    

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
        }
    }

    private IEnumerable<InstrumentSettings> sortedSymbols =>
        sortBy is null
            ? Symbols
            : Symbols.OrderBy(x => x, new ComparisonComparer<InstrumentSettings>(InstrumentSettings.GetComparer(sortBy, sortDesc)));
    

    private async Task SymbolCreateRequest(string symbol)
    {
        await OnSymbolCreated.InvokeAsync(symbol);
    }

    private void ShowCreateSymbolModal()
    {
        _createSymbolModal.Show();
    }

}
