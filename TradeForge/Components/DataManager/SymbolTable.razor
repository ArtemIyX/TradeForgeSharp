@using System.Linq.Expressions
@using TradeForge.Core.Enums
@using TradeForge.Core.Extensions
@using TradeForge.Core.Models
@using System.Globalization
@using Microsoft.Extensions.Logging
@using TradeForge.Components.DataManager
@using TradeForge.Components.Shared
@using TradeForge.Components.Shared.Modals
@using TradeForge.Models
@using TradeForge.Services
@using TradeForge.SymbolManager.Services.Interfaces
@inject IJSRuntime JS

<button class="button is-primary" @onclick="ShowCreateSymbolModal">
    <span class="icon"><i class="fas fa-plus"></i></span>
    <span>Add Symbol</span>
</button>

<div class="table-container mt-4">
    <table class="table is-fullwidth is-hoverable is-striped">
        <thead>
        <tr>
            <SymbolTableHeader TItem="InstrumentSettings" TKey="string"
                               Title="Name"
                               CurrentSortBy="@sortBy"
                               CurrentDescending="@sortDesc"
                               KeyExpression="s => s.Ticker"
                               SortChanged="@(e =>
                                            {
                                                sortBy = e.Property;
                                                sortDesc = e.Desc;
                                            })"/>

            <SymbolTableHeader TItem="InstrumentSettings" TKey="string"
                               Title="Description"
                               CurrentSortBy="@sortBy"
                               CurrentDescending="@sortDesc"
                               KeyExpression="s => s.Description"
                               SortChanged="@(e =>
                                            {
                                                sortBy = e.Property;
                                                sortDesc = e.Desc;
                                            })"/>

            <SymbolTableHeader TItem="InstrumentSettings" TKey="Timeframe"
                               Title="Min TF"
                               CurrentSortBy="@sortBy"
                               CurrentDescending="@sortDesc"
                               KeyExpression="s => s.Summary.MinimalTimeframe"
                               SortChanged="@(e =>
                                            {
                                                sortBy = e.Property;
                                                sortDesc = e.Desc;
                                            })"/>

            <SymbolTableHeader TItem="InstrumentSettings" TKey="DateTime"
                               Title="From"
                               CurrentSortBy="@sortBy"
                               CurrentDescending="@sortDesc"
                               KeyExpression="s => s.Summary.DateFrom"
                               SortChanged="@(e =>
                                            {
                                                sortBy = e.Property;
                                                sortDesc = e.Desc;
                                            })"/>

            <SymbolTableHeader TItem="InstrumentSettings" TKey="DateTime"
                               Title="To"
                               CurrentSortBy="@sortBy"
                               CurrentDescending="@sortDesc"
                               KeyExpression="s => s.Summary.DateTo"
                               SortChanged="@(e =>
                                            {
                                                sortBy = e.Property;
                                                sortDesc = e.Desc;
                                            })"/>

            <SymbolTableHeader TItem="InstrumentSettings" TKey="int"
                               Title="Days"
                               CurrentSortBy="@sortBy"
                               CurrentDescending="@sortDesc"
                               KeyExpression="s => s.Summary.TotalDays"
                               SortChanged="@(e =>
                                            {
                                                sortBy = e.Property;
                                                sortDesc = e.Desc;
                                            })"/>

            <SymbolTableHeader TItem="InstrumentSettings" TKey="int"
                               Title="Records"
                               CurrentSortBy="@sortBy"
                               CurrentDescending="@sortDesc"
                               KeyExpression="s => s.Summary.TotalRecords"
                               SortChanged="@(e =>
                                            {
                                                sortBy = e.Property;
                                                sortDesc = e.Desc;
                                            })"/>

            <SymbolTableHeader TItem="InstrumentSettings" TKey="string"
                               Title="Category"
                               CurrentSortBy="@sortBy"
                               CurrentDescending="@sortDesc"
                               KeyExpression="s => s.Category"
                               SortChanged="@(e =>
                                            {
                                                sortBy = e.Property;
                                                sortDesc = e.Desc;
                                            })"/>
        </tr>
        </thead>
        <tbody>
        @foreach (var s in SortedSymbols)
        {
            <tr class="@(s == SelectedSymbol ? "is-selected" : "")"
                @onclick="() => OnSymbolSelected.InvokeAsync(s)"
                @oncontextmenu:preventDefault
                @oncontextmenu="e => ShowContextMenu(s, e)">
                <td><strong>@s.Ticker</strong></td>
                <td>@s.Description</td>
                <td>@s.Summary.MinimalTimeframe</td>
                <td>@s.Summary.DateFrom.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture)</td>
                <td>@s.Summary.DateTo.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture)</td>
                <td>@s.Summary.TotalDays</td>
                <td>@s.Summary.TotalRecords</td>
                <td><span class="tag is-info is-light">@s.Category</span></td>
            </tr>
        }
        </tbody>
    </table>
</div>

<GenericPromptModal @ref="_createSymbolModalRef"
                    Title="Add new symbol"
                    Label="Enter symbol name"
                    Placeholder="BTCUSDT"
                    ButtonText="Create"
                    OnSuccess="SymbolCreateRequest"
                    OnDiscard="() => { }"/>

<ContextMenu @ref="_contextMenuRef" Items="_contextMenuItems"/>


@code {
    private GenericPromptModal _createSymbolModalRef = default!;

    [Inject] protected ILogger<SymbolTable> Logger { get; set; }
    [Inject] public ISymbolManager SymbolManager { get; set; }

    [Inject] public IAlertService Alert { get; set; }
    
    private ContextMenu? _contextMenuRef;

    private List<ContextMenuItem> _contextMenuItems;

    private InstrumentSettings? _contextSymbol = null;

    [Parameter] public InstrumentSettings? SelectedSymbol { get; set; }

    [Parameter] public EventCallback<InstrumentSettings> OnSymbolSelected { get; set; }
    [Parameter] public EventCallback<string> OnSymbolCreated { get; set; }

    [Parameter] public EventCallback<InstrumentSettings> OnSymbolEdit { get; set; }
    [Parameter] public EventCallback<InstrumentSettings> OnSymbolDelete { get; set; }
    [Parameter] public EventCallback<InstrumentSettings> OnSymbolClear { get; set; }
    [Parameter] public EventCallback<InstrumentSettings> OnSymbolImport { get; set; }
    [Parameter] public EventCallback<InstrumentSettings> OnSymbolDownload { get; set; }

    private string? newSymbolName;

    private string? sortBy;
    private bool sortDesc;
    
    private List<InstrumentSettings> symbols = [];

    public SymbolTable()
    {
        _contextMenuItems = new List<ContextMenuItem>
        {
            new ContextMenuItem("Edit", EditSymbol),
            new ContextMenuItem("Delete", DeleteSymbol),
            new ContextMenuItem("Clear Data", ClearSymbol),
            new ContextMenuItem("Import Data", ImportSymbol),
            new ContextMenuItem("Download", DownloadSymbol)
        };
    }

    protected override Task OnInitializedAsync()
    {
        RefreshSymbols();
        return Task.CompletedTask;
    }
    
    public void RefreshSymbols()
    {
        try
        {
            symbols = SymbolManager.GetAllSymbols().ToList();
            InvokeAsync(StateHasChanged);
            if (symbols.Count == 0)
            {
                Alert.ShowWarning($"No symbols loaded");
            }
            else
            {
                Alert.ShowInfo($"Loaded {symbols.Count} symbols");
            }
        }
        catch (Exception ex)
        {
            Alert.ShowError($"Failed to get symbols: {ex.Message}");
        }
    }

    private IEnumerable<InstrumentSettings> SortedSymbols =>
        sortBy is null
            ? symbols
            : symbols.OrderBy(x => x, new ComparisonComparer<InstrumentSettings>(InstrumentSettings.GetComparer(sortBy, sortDesc)));


    private async Task SymbolCreateRequest(string symbol)
    {
        await OnSymbolCreated.InvokeAsync(symbol);
    }

    private void ShowCreateSymbolModal()
    {
        _createSymbolModalRef.Show();
    }


    private async Task ShowContextMenu(InstrumentSettings instrumentSettings, MouseEventArgs mouseEventArgs)
    {
        if (_contextMenuRef != null)
        {
            await _contextMenuRef.ShowAsync(mouseEventArgs.ClientX, mouseEventArgs.ClientY);
            _contextSymbol = instrumentSettings;
        }
    }

    #region ContextMenuCallbacks

    private async Task EditSymbol() => await OnSymbolEdit.InvokeAsync(_contextSymbol);

    private async Task DownloadSymbol() => await OnSymbolDownload.InvokeAsync(_contextSymbol);

    private async Task DeleteSymbol() => await OnSymbolDelete.InvokeAsync(_contextSymbol);

    private async Task ImportSymbol() => await OnSymbolImport.InvokeAsync(_contextSymbol);

    private async Task ClearSymbol() => await OnSymbolClear.InvokeAsync(_contextSymbol);

    #endregion


}
