<div class="is-flex is-align-items-center is-flex-grow-1">


    @*<!-- SPACER – keeps the spinner’s horizontal space reserved -->
    <div class="is-flex-grow-1 mr-4">
        <!-- Circular spinner – shown only while downloading -->
        <div class="@(IsDownloading ? "" : "is-invisible")"
             style="width:24px;height:24px;">
            <svg viewBox="0 0 50 50" style="width:100%;height:100%;animation:spin 1s linear infinite;">
                <circle cx="25"
                        cy="25"
                        r="20"
                        fill="none"
                        stroke="currentColor"
                        stroke-width="5"
                        stroke-linecap="round"
                        stroke-dasharray="31.4 31.4"
                        class="has-text-info">
                </circle>
            </svg>
        </div>
    </div>*@

    <!-- Buttons – never move -->
    <button class="button is-success @(IsDownloading ? "is-loading" : "")"
            disabled="@IsDownloading"
            @onclick="HandleDownloadAsync">
        Download
    </button>

    <button class="button ml-2" @onclick="HandleDiscard" disabled="@IsDownloading">
        Discard
    </button>

    <!-- ERROR MESSAGE – appears only when set -->
    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <p class="has-text-danger mb-2">@ErrorMessage</p>
    }
</div>


@code {
  
    [Parameter] public int Progress { get; set; }
    [Parameter] public EventCallback OnDownload { get; set; }
    [Parameter] public EventCallback OnDiscard { get; set; }

    public string? ErrorMessage { get; set; } = string.Empty;
    public bool IsDownloading { get; set; } = false;

    private async Task HandleDownloadAsync()
    {
        IsDownloading = true;
        await OnDownload.InvokeAsync();
    }

    private async Task HandleDiscard()
    {
        await OnDiscard.InvokeAsync();
    }
}