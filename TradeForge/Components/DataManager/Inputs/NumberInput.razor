@using System.Globalization
@typeparam T where T : struct, IConvertible

<div class="field is-horizontal">
    <div class="field-label is-normal">
        <label class="label has-text-light">@Label</label>
    </div>
    <div class="field-body">
        <div class="field">
            <div class="control">
                <input class="input has-background-grey-darker has-text-light"
                       type="number"
                       step="any"
                       value="@BindConverter.FormatValue(Value, CultureInfo.InvariantCulture)"
                       @onchange="OnChanged" />
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public string Label { get; set; } = string.Empty;
    [Parameter] public T Value { get; set; }
    [Parameter] public EventCallback<T> ValueChanged { get; set; }

    private async Task OnChanged(ChangeEventArgs e)
    {
       if (BindConverter.TryConvertTo<T>(e.Value?.ToString(), CultureInfo.InvariantCulture, out var v))
            await ValueChanged.InvokeAsync(v);
    }
}