@page "/datamanager"

@using System.Linq.Expressions
@using TradeForge.Core.Enums
@using TradeForge.Core.Extensions
@using TradeForge.Core.Models
@using System.Globalization

<div class="table-container">
    <table class="table is-fullwidth is-hoverable is-striped">
        <thead>
            <tr>
                @Header("Symbol", s => s.Symbol)
                @Header("Description", s => s.Description)
                @Header("Min TF", s => s.MinimalTimeframe)
                @Header("From", s => s.DateFrom)
                @Header("To", s => s.DateTo)
                @Header("Days", s => s.TotalDays)
                @Header("Records", s => s.TotalRecords)
                @Header("Category", s => s.Category)
            </tr>
        </thead>
        <tbody>
            @foreach (var s in sortedSymbols)
            {
                <tr>
                    <td><strong>@s.Symbol</strong></td>
                    <td>@s.Description</td>
                    <td>@s.MinimalTimeframe</td>
                    <td>@s.DateFrom.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture)</td>
                    <td>@s.DateTo.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture)</td>
                    <td>@s.TotalDays</td>
                    <td>@s.TotalRecords</td>
                    <td><span class="tag is-info is-light">@s.Category</span></td>
                </tr>
            }
        </tbody>
    </table>
</div>


@code {

    // demo array – replace with your real source
    private SymbolCoverage[] symbols =
    {
        new()
        {
            Symbol = "EURUSD",
            Description = "Euro vs US Dollar",
            MinimalTimeframe = Timeframe.M1,
            DateFrom = new DateTime(2020, 1, 1),
            DateTo   = DateTime.UtcNow.Date,
            TotalRecords = 1_250_000,
            Category = "Forex"
        },
        new()
        {
            Symbol = "BTCUSDT",
            Description = "Bitcoin / Tether",
            MinimalTimeframe = Timeframe.M5,
            DateFrom = new DateTime(2022, 6, 1),
            DateTo   = DateTime.UtcNow.Date,
            TotalRecords = 180_000,
            Category = "Crypto"
        }
    };

    private string? sortBy;
    private bool sortDesc;

    private IEnumerable<SymbolCoverage> sortedSymbols =>
    sortBy is null
        ? symbols
        : symbols.OrderBy(x => x, new ComparisonComparer<SymbolCoverage>(SymbolCoverage.GetComparer(sortBy, sortDesc)));

    private RenderFragment Header<TKey>(string title, Expression<Func<SymbolCoverage, TKey>> key)
    {
        var name = ((MemberExpression)key.Body).Member.Name;
        return __builder =>
        {
            <th style="cursor:pointer" @onclick="() => ToggleSort(name)">
                @title
                @{
                    var icon = sortBy == name
                    ? (sortDesc ? "fa-sort-down" : "fa-sort-up")
                    : "fa-sort";
                }
                <i class="fas @icon ml-2"></i>
            </th>
        };
    }

    private void ToggleSort(string property)
    {
        if (sortBy == property)
            sortDesc = !sortDesc;
        else
        {
            sortBy = property;
            sortDesc = false;
        }
    }

}
