@page "/datamanager"

@using Microsoft.Extensions.Logging
@using TradeForge.Components.DataManager
@using TradeForge.Core.Enums
@using TradeForge.Core.Models
@using TradeForge.Services
@using TradeForge.SymbolManager.Services.Interfaces
@using TradeForge.Components.Shared
@inject ISymbolManager SymbolManager
@inject IAlertService Alert

<!-- Bulma tabs -->
<div class="tabs is-boxed">
    <ul>
        <li class="@(ActiveTab == "symbols" ? "is-active" : "")">
            <a @onclick="@(() => SetTab("symbols"))">Symbols</a>
        </li>
        @if (selectedSymbol is not null)
        {
            <li class="@(ActiveTab == "settings" ? "is-active" : "")">
                <a @onclick="@(() => SetTab("settings"))">Settings</a>
            </li>
            <li class="@(ActiveTab == "ohlc" ? "is-active" : "")">
                <a @onclick="@(() => SetTab("ohlc"))">OHLC</a>
            </li>
            <li class="@(ActiveTab == "chart" ? "is-active" : "")">
                <a @onclick="@(() => SetTab("chart"))">Chart</a>
            </li>
        }
    </ul>
</div>

<!-- Content area -->
<div class="m-5">
    @switch (ActiveTab)
    {
        case "symbols":
            <SymbolTable Symbols="@symbols"
                         SelectedSymbol="@selectedSymbol"
                         OnSymbolSelected="@(s => selectedSymbol = s)"
                         OnSymbolCreated="@(s => SymbolCreateRequest(s))"
                         OnSymbolDelete="@(s => SymbolDeleteRequest(s))"/>
            break;
        case "settings":
            <SymbolSettings/>
            break;
        case "ohlc":
            <OHLCTable Rows="@OHLCRows"/>
            break;
        case "chart":
            <SymbolChart Symbol="@selectedSymbol?.Ticker" Data="@OHLCRows"/>
            break;
    }
</div>

<ConfirmationModal @ref="DeleteSymbolModal"
                   OnSuccess="DeleteSymbolSuccess"
                   YesText="Yes"
                   NoText="No"
                   Title="Symbol deletion"
                   Message=@DeleteSymbolMessageStr/>

@code
{
    private string ActiveTab = "symbols";
    public ConfirmationModal DeleteSymbolModal { get; set; }

    private void SetTab(string tab) => ActiveTab = tab;

    private InstrumentSettings? selectedSymbol = null;
    private InstrumentSettings? deleteSymbolChose = null;
    private string DeleteSymbolMessageStr => $"Are you sure you want delete symbol '{deleteSymbolChose?.Ticker}'?";

    private List<OHLC> OHLCRows = Enumerable.Range(0, 100)
        .Select(i =>
        {
            var date = DateTime.UtcNow.Date.AddDays(-19 + i);
            var open = 100 + i * 0.5 + Math.Sin(i) * 2;
            var close = open + (Math.Cos(i) * 1.5);
            var high = Math.Max(open, close) + Math.Abs(Math.Sin(i * 2)) * 1.2;
            var low = Math.Min(open, close) - Math.Abs(Math.Cos(i * 2)) * 1.1;
            var volume = 1_000_000 + i * 50_000 + (int)(Math.Sin(i) * 100_000);

            return new OHLC
            {
                Timestamp = date,
                Open = Math.Round(open, 4),
                High = Math.Round(high, 4),
                Low = Math.Round(low, 4),
                Close = Math.Round(close, 4),
                Volume = volume
            };
        })
        .ToList();

    // demo array – replace with your real source
    private List<InstrumentSettings> symbols = [];

    protected override async Task OnInitializedAsync()
    {
        RefreshSymbols();
    }

    protected void RefreshSymbols()
    {
        try
        {
            symbols = SymbolManager.GetAllSymbols().ToList();
            StateHasChanged();
            if (symbols.Count == 0)
            {
                Alert.ShowWarning($"No symbols loaded");
            }
            else
            {
                Alert.ShowInfo($"Loaded {symbols.Count} symbols");
            }
        }
        catch (Exception ex)
        {
            Alert.ShowError($"Failed to get symbols: {ex.Message}");
        }
    }

    protected void SymbolCreateRequest(string symbol)
    {
        try
        {
            SymbolManager.CreateSymbol(symbol);
            Alert.ShowInfo($"Creating '{symbol}' symbol...");
            RefreshSymbols();
        }
        catch (Exception ex)
        {
            Alert.ShowError($"Failed to create symbol: {ex.Message}");
        }
    }


    private void SymbolDeleteRequest(InstrumentSettings arg)
    {
        try
        {
            deleteSymbolChose = arg;
            DeleteSymbolModal.Show();
        }
        catch (Exception ex)
        {
            Alert.ShowError($"Failed to delete symbol: {ex.Message}");
        }
    }

    private void DeleteSymbolSuccess()
    {
        try
        {
            if (deleteSymbolChose is null)
            {
                throw new NullReferenceException("Delete chose is null");
            }

            string sym = deleteSymbolChose.Ticker;
            
            SymbolManager.DeleteSymbol(sym);
            
            Alert.ShowInfo($"Symbol '{sym}' has been deleted");
            deleteSymbolChose = null;
            
            RefreshSymbols();
        }
        catch (Exception ex)
        {
            Alert.ShowError($"Failed to delete symbol: {ex.Message}");
        }
    }
}