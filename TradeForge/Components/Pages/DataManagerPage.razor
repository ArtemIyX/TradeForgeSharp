@page "/datamanager"

@using TradeForge.Components.DataManager
@using TradeForge.Core.Enums
@using TradeForge.Core.Models

<!-- Bulma tabs -->
<div class="tabs is-boxed">
    <ul>
        <li class="@(ActiveTab == "symbols" ? "is-active" : "")">
            <a @onclick="@(() => SetTab("symbols"))">Symbols</a>
        </li>
        @if (selectedSymbol is not null)
        {
            <li class="@(ActiveTab == "settings" ? "is-active" : "")">
                <a @onclick="@(() => SetTab("settings"))">Settings</a>
            </li>
            <li class="@(ActiveTab == "ohlc" ? "is-active" : "")">
                <a @onclick="@(() => SetTab("ohlc"))">OHLC</a>
            </li>
            <li class="@(ActiveTab == "chart" ? "is-active" : "")">
                <a @onclick="@(() => SetTab("chart"))">Chart</a>
            </li>
        }
    </ul>
</div>

<!-- Content area -->
<div class="mt-4">
    @switch (ActiveTab)
    {
        case "symbols":
            <SymbolTable Symbols="@symbols"
                         SelectedSymbol="@selectedSymbol"
                         OnSymbolSelected="@(s => selectedSymbol = s)"/>
            break;
        case "settings":
            <SymbolSettings/>
            break;
        case "ohlc":
            <OHLCTable Rows="@OHLCRows"/>
            break;
        case "chart":
            <SymbolChart />
            break;
    }
</div>


@code
{
    private string ActiveTab = "symbols";
    private void SetTab(string tab) => ActiveTab = tab;

    private SymbolCoverage? selectedSymbol = null;


    private List<OHLC> OHLCRows = Enumerable.Range(0, 100)
        .Select(i =>
        {
            var date = DateTime.UtcNow.Date.AddDays(-19 + i);
            var open  = 100m + i * 0.5m + (decimal)Math.Sin(i) * 2m;
            var close = open + (decimal)(Math.Cos(i) * (double)1.5m);
            var high  = Math.Max(open, close) + (decimal)Math.Abs(Math.Sin(i * 2)) * 1.2m;
            var low   = Math.Min(open, close) - (decimal)Math.Abs(Math.Cos(i * 2)) * 1.1m;
            var volume = 1_000_000 + i * 50_000 + (int)(Math.Sin(i) * 100_000);

            return new OHLC
            {
                Timestamp = date,
                Open      = Math.Round(open, 4),
                High      = Math.Round(high, 4),
                Low       = Math.Round(low, 4),
                Close     = Math.Round(close, 4),
                Volume    = volume
            };
        })
        .ToList();
    
   // demo array – replace with your real source
    private SymbolCoverage[] symbols =
    {
        new()
        {
            Symbol = "EURUSD",
            Description = "Euro vs US Dollar",
            MinimalTimeframe = Timeframe.M1,
            DateFrom = new DateTime(2020, 1, 1),
            DateTo   = DateTime.UtcNow.Date,
            TotalRecords = 1_250_000,
            Category = "Forex"
        },
        new()
        {
            Symbol = "BTCUSDT",
            Description = "Bitcoin / Tether",
            MinimalTimeframe = Timeframe.M5,
            DateFrom = new DateTime(2022, 6, 1),
            DateTo   = DateTime.UtcNow.Date,
            TotalRecords = 180_000,
            Category = "Crypto"
        },
        new()
        {
            Symbol = "AAPL",
            Description = "Apple tech",
            MinimalTimeframe = Timeframe.D,
            DateFrom = new DateTime(2000, 1, 1),
            DateTo   = new DateTime(2025, 1, 1),
            TotalRecords = 250_000,
            Category = "Stocks"
        }
    };

   
}