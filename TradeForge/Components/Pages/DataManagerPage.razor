@page "/datamanager"

@using Microsoft.Extensions.Logging
@using TradeForge.Components.DataManager
@using TradeForge.Core.Enums
@using TradeForge.Core.Models



<!-- Bulma tabs -->
<div class="tabs is-boxed">
    <ul>
        <li class="@(ActiveTab == "symbols" ? "is-active" : "")">
            <a @onclick="@(() => SetTab("symbols"))">Symbols</a>
        </li>
        @if (selectedSymbol is not null)
        {
            <li class="@(ActiveTab == "settings" ? "is-active" : "")">
                <a @onclick="@(() => SetTab("settings"))">Settings</a>
            </li>
            <li class="@(ActiveTab == "ohlc" ? "is-active" : "")">
                <a @onclick="@(() => SetTab("ohlc"))">OHLC</a>
            </li>
            <li class="@(ActiveTab == "chart" ? "is-active" : "")">
                <a @onclick="@(() => SetTab("chart"))">Chart</a>
            </li>
        }
    </ul>
</div>

<!-- Content area -->
<div class="m-5">
    @switch (ActiveTab)
    {
        case "symbols":
            <SymbolTable Symbols="@symbols"
                         SelectedSymbol="@selectedSymbol"
                         OnSymbolSelected="@(s => selectedSymbol = s)"/>
            break;
        case "settings":
            <SymbolSettings/>
            break;
        case "ohlc":
            <OHLCTable Rows="@OHLCRows"/>
            break;
        case "chart":
            <SymbolChart Symbol="@selectedSymbol?.Ticker" Data="@OHLCRows"/>
            break;
    }
</div>


@code
{
    private string ActiveTab = "symbols";
    private void SetTab(string tab) => ActiveTab = tab;

    private InstrumentSettings? selectedSymbol = null;


    private List<OHLC> OHLCRows = Enumerable.Range(0, 100)
        .Select(i =>
        {
            var date = DateTime.UtcNow.Date.AddDays(-19 + i);
            var open = 100 + i * 0.5 + Math.Sin(i) * 2;
            var close = open + (Math.Cos(i) * 1.5);
            var high = Math.Max(open, close) + Math.Abs(Math.Sin(i * 2)) * 1.2;
            var low = Math.Min(open, close) - Math.Abs(Math.Cos(i * 2)) * 1.1;
            var volume = 1_000_000 + i * 50_000 + (int)(Math.Sin(i) * 100_000);

            return new OHLC
            {
                Timestamp = date,
                Open = Math.Round(open, 4),
                High = Math.Round(high, 4),
                Low = Math.Round(low, 4),
                Close = Math.Round(close, 4),
                Volume = volume
            };
        })
        .ToList();

    // demo array – replace with your real source
    private InstrumentSettings[] symbols =
    {
        new()
        {
            Ticker = "EURUSD",
            Description = "Euro vs US Dollar",
            
            Category = "Forex"
        },
        new()
        {
            Ticker = "BTCUSDT",
            Description = "Bitcoin / Tether",

            Category = "Crypto"
        },
        new()
        {
            Ticker = "AAPL",
            Description = "Apple tech",

            Category = "Stocks"
        }
    };

    protected override async Task OnInitializedAsync()
    {
        
    }

}